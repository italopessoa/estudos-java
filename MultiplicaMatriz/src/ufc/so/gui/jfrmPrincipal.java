
/*
 * jfrmPrincipal.java
 *
 * Created on 17/04/2012, 22:50:23
 */
package ufc.so.gui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import ufc.so.gui.xml.XMLFileProperties;
import ufc.so.thread.Multiplicar;

/**
 *
 * @author Italo Pessoa - italoneypessoa@gmail.com
 */
public class jfrmPrincipal extends javax.swing.JFrame {

    // <editor-fold defaultstate="collapsed" desc="Atributos privados">
    //lista com opções de tipos de matrizes
    private List<String> tiposMatrizList;
    //mapa com caminho dos XML's de matrizes
    Map<String, String> filePathMap;
    //vetor com msgs de log
    private static List<String> logs;
    //linha A, linha B, coluna A, coluna B
    private int LA, LB, CA, CB;

    // </editor-fold>
    /** Creates new form jfrmPrincipal */
    public jfrmPrincipal() {
        initComponents();

        //preencherListaMatrizes();
        preencherFilePathMap();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jcmbA = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jspnQtdExec = new javax.swing.JSpinner();
        jcmbB = new javax.swing.JComboBox();
        jbtnMultiplicaThread = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtxtAStatus = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Multiplicação de Matrizes(Italo Pessoa)");
        setMinimumSize(new java.awt.Dimension(611, 409));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selecione as matrizes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 18))); // NOI18N

        jcmbA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbAItemStateChanged(evt);
            }
        });

        jLabel2.setText("Matriz A:");

        jLabel3.setText("Matriz B:");

        jLabel1.setText("Quantas vezes executar?");

        jspnQtdExec.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jspnQtdExecStateChanged(evt);
            }
        });

        jcmbB.setActionCommand("jcmbB");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(jcmbA, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jcmbB, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jspnQtdExec, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jcmbA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jcmbB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jspnQtdExec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jbtnMultiplicaThread.setText("Com Thread");
        jbtnMultiplicaThread.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnMultiplicaThreadActionPerformed(evt);
            }
        });

        jButton2.setText("Sem Thread");

        jtxtAStatus.setColumns(20);
        jtxtAStatus.setRows(5);
        jScrollPane1.setViewportView(jtxtAStatus);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jbtnMultiplicaThread)
                        .addGap(28, 28, 28)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnMultiplicaThread)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-611)/2, (screenSize.height-452)/2, 611, 452);
    }// </editor-fold>//GEN-END:initComponents

    private void jcmbAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbAItemStateChanged
        this.filtrarComboB(jcmbA.getSelectedItem().toString());
    }//GEN-LAST:event_jcmbAItemStateChanged

    private void jspnQtdExecStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jspnQtdExecStateChanged
        //limitar apenas valores positivos
        int qtdExec = Integer.parseInt(jspnQtdExec.getValue().toString());
        if (qtdExec < 0) {
            this.jspnQtdExec.setValue(0);
        }
    }//GEN-LAST:event_jspnQtdExecStateChanged

    private void jbtnMultiplicaThreadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnMultiplicaThreadActionPerformed
        this.multiplicarComThread();
    }//GEN-LAST:event_jbtnMultiplicaThreadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        String nativeLF = UIManager.getSystemLookAndFeelClassName();
        try {
            //for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            //  if ("Nimbus".equals(info.getName())) {
            javax.swing.UIManager.setLookAndFeel(nativeLF);
            //}
            //}
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(jfrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(jfrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(jfrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(jfrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }


        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new jfrmPrincipal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnMultiplicaThread;
    private javax.swing.JComboBox jcmbA;
    private javax.swing.JComboBox jcmbB;
    private javax.swing.JSpinner jspnQtdExec;
    private javax.swing.JTextArea jtxtAStatus;
    // End of variables declaration//GEN-END:variables

    // <editor-fold defaultstate="collapsed" desc="Métodos privados">
    /**
     * Preencher mapas com caminho para arquivos de matrizes
     */
    private void preencherFilePathMap() {
        this.filePathMap = new HashMap<String, String>();
        this.filePathMap.put(XMLFileProperties.dimensoesMatriz3x2, XMLFileProperties.filePathMatriz3x2);
        this.filePathMap.put(XMLFileProperties.dimensoesMatriz3x3, XMLFileProperties.filePathMatriz3x3);
        this.filePathMap.put(XMLFileProperties.dimensoesMatriz10x10, XMLFileProperties.filePathMatriz10x10);
        this.filePathMap.put(XMLFileProperties.dimensoesMatriz10x9, XMLFileProperties.filePathMatriz10x9);

        preencherListaMatrizes();
    }

    /**
     * Preencher lista com dimensões das matrizes
     */
    private void preencherListaMatrizes() {
        this.tiposMatrizList = new ArrayList<String>();
        this.tiposMatrizList.add(XMLFileProperties.dimensoesMatriz3x2);
        this.tiposMatrizList.add(XMLFileProperties.dimensoesMatriz3x3);
        this.tiposMatrizList.add(XMLFileProperties.dimensoesMatriz10x10);
        this.tiposMatrizList.add(XMLFileProperties.dimensoesMatriz10x9);

        //this.tiposMatrizList.add("3x4");
        //this.tiposMatrizList.add("2x3");

        precherComboA();
    }

    /**
     * Preencher combobox com opções para a matriz A
     */
    private void precherComboA() {
        DefaultComboBoxModel cbmModel = new DefaultComboBoxModel();

        for (String item : this.tiposMatrizList) {
            cbmModel.addElement(item);
        }

        this.jcmbA.setModel(cbmModel);
    }

    /**
     * Preencher combobox com opções para a matriz B, 
     * a partir da escolha na matriz A
     */
    private void filtrarComboB(String dimensoes) {
        int linha = 0;

        //matriz com indices entre 1 e 9
        if (dimensoes.length() == 3) {
            this.LA = Integer.parseInt(dimensoes.substring(0, 1));
            this.CA = Integer.parseInt(dimensoes.substring(2, 3));
        }

        //matriz com indices entre 11 e 99
        if (dimensoes.length() == 5) {
            this.LA = Integer.parseInt(dimensoes.substring(0, 2));
            this.CA = Integer.parseInt(dimensoes.substring(3, 5));
        }

        //matriz com indices entre 100 e 999
        if (dimensoes.length() == 7) {
            this.LA = Integer.parseInt(dimensoes.substring(0, 3));
            this.CA = Integer.parseInt(dimensoes.substring(4, 7));
        }

        //JOptionPane.showMessageDialog(rootPane, this.LA + "xx"+this.CA);

        //int coluna = Integer.parseInt(dimensoes.substring(2,3));

        DefaultComboBoxModel cbmModel = new DefaultComboBoxModel();

        //a[m][k] b[k][n]
        for (String item : this.tiposMatrizList) {
            int colunaAux = 0;

            //int linhaAux = Integer.parseInt(String.valueOf(item).substring(0,1));

            //matriz com indices entre 1 e 9
            if (String.valueOf(item).length() == 3) {
                this.LB = Integer.parseInt(String.valueOf(item).substring(0, 1));
                this.CB = Integer.parseInt(String.valueOf(item).substring(2, 3));
            }

            //matriz com indices entre 10 e 99
            if (String.valueOf(item).length() == 5) {
                this.LB = Integer.parseInt(String.valueOf(item).substring(0, 2));
                this.CB = Integer.parseInt(String.valueOf(item).substring(3, 5));
                
                //JOptionPane.showMessageDialog(rootPane, String.valueOf(item).substring(3, 5) +" - "+ String.valueOf(item).substring(3, 5));
            }

            //matriz com indices entre 100 e 999
            if (String.valueOf(item).length() == 7) {
                this.LB = Integer.parseInt(String.valueOf(item).substring(0, 3));
                this.CB = Integer.parseInt(String.valueOf(item).substring(4, 7));
            }

            //JOptionPane.showMessageDialog(rootPane, this.LA +"x"+this.CA +" "+this.LB +"x"+this.CB);
            //if(this.LA > this.CB){
            //JOptionPane.showMessageDialog(null,LA + " "+ CB);
            cbmModel.addElement(item);
            //}
        }
        this.jcmbB.setModel(cbmModel);
    }

    /**
     * Multiplicar matrizes com threads
     */
    private void multiplicarComThread() {
        int linhaA = 0; //= Integer.parseInt(this.jcmbA.getSelectedItem().toString().substring(0, 1));
        int linhaB = 0; //= Integer.parseInt(this.jcmbB.getSelectedItem().toString().substring(0, 1));

        int colunaA = 0; //= Integer.parseInt(this.jcmbA.getSelectedItem().toString().substring(2, 3));
        int colunaB = 0;// = Integer.parseInt(this.jcmbB.getSelectedItem().toString().substring(2, 3));

        // <editor-fold defaultstate="collapsed" desc="Escoler tipo de matriz>

        try {
            linhaA = Integer.parseInt(this.jcmbA.getSelectedItem().toString().substring(0, 1));
            linhaB = Integer.parseInt(this.jcmbB.getSelectedItem().toString().substring(0, 1));

            colunaA = Integer.parseInt(this.jcmbA.getSelectedItem().toString().substring(2, 3));
            colunaB = Integer.parseInt(this.jcmbB.getSelectedItem().toString().substring(2, 3));
        } catch (NumberFormatException exx) {
            try {
                linhaA = Integer.parseInt(this.jcmbA.getSelectedItem().toString().substring(0, 2));
                linhaB = Integer.parseInt(this.jcmbB.getSelectedItem().toString().substring(0, 2));

                colunaA = Integer.parseInt(this.jcmbA.getSelectedItem().toString().substring(3, 4));
                colunaB = Integer.parseInt(this.jcmbB.getSelectedItem().toString().substring(3, 4));
                //JOptionPane.showMessageDialog(rootPane, this.jcmbA.getSelectedItem().toString().substring(3, 4));
            } catch (NumberFormatException ex) {

                try {
                    linhaA = Integer.parseInt(this.jcmbA.getSelectedItem().toString().substring(0, 2));
                    linhaB = Integer.parseInt(this.jcmbB.getSelectedItem().toString().substring(0, 2));

                    colunaA = Integer.parseInt(this.jcmbA.getSelectedItem().toString().substring(4, 5));
                    colunaB = Integer.parseInt(this.jcmbB.getSelectedItem().toString().substring(4, 5));
                    
                } catch (NumberFormatException x) {
                    x.printStackTrace();
                }
            }

        }
        // </editor-fold>




        String filePathA = this.filePathMap.get(this.jcmbA.getSelectedItem().toString());
        String filePathB = this.filePathMap.get(this.jcmbB.getSelectedItem().toString());
        System.err.println(filePathA);
        System.err.println(filePathB);

        logs = new ArrayList<String>();
//        JOptionPane.showMessageDialog(rootPane,  + "xx"+);

        Multiplicar m = new Multiplicar(this.LA, linhaB, this.CA, colunaB, filePathA, filePathB);
        m.multiplicarComThread();

        for (String msg : logs) {
            jtxtAStatus.setText(jtxtAStatus.getText() + msg);
        }

    }

    /**
     * Armazenar log de threads
     * @param msg 
     */
    public static void logThreadStatus(String msg) {
        logs.add(msg);
    }
    // </editor-fold>
}
